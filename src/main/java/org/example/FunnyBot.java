package org.example;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.List;
import java.util.Random;

public class FunnyBot extends TelegramLongPollingBot {

    private final String BOT_USERNAME = System.getenv("BOT_USERNAME");
    private final String BOT_TOKEN = System.getenv("BOT_TOKEN");
    //System.getenv

    private final Random random = new Random();

    private final List<String> responses = List.of(
            "–Ø —Ç—É—Ç, —â–æ–± —Ç—Ä–æ–ª–∏—Ç–∏ –≤–∞—Å! üòÜ",
            "–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à —Ü–µ –∑–Ω–∞—Ç–∏? ü§î",
            "–ù–∞–≤—ñ—â–æ –º–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏, —è–∫—â–æ —Ç–∏ —Å–∞–º –∑–Ω–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å? üòè",
            "–ì—É–≥–ª –≤ –¥–æ–ø–æ–º–æ–≥—É, –¥—Ä—É–∂–µ! üòÇ",
            "–Ø–∫—â–æ –¥–æ–≤–≥–æ –¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –ø–æ–±–∞—á–∏—Ç–∏ —Å–µ–Ω—Å –∂–∏—Ç—Ç—è... –∞–±–æ –Ω—ñ.",
            "–ª–æ—Ö –ø—Ä–æ—Å—Ç–æ",
            "–ó–Ω–∞—î—à, —è –± –∑—Ä–æ–±–∏–≤ —Ü–µ, –∞–ª–µ –º–µ–Ω—ñ –ª—ñ–Ω—å–∫–∏. üòÖ",
            "–¢–∏ —Å–µ—Ä–π–æ–∑–Ω–æ –∑–∞—Ä–∞–∑? ü§®",
            "–•—Ç–æ —Ü–µ –¥–æ–∑–≤–æ–ª–∏–≤? üòÇ",
            "–ê–ª–µ —è –∂ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç—ñ–≤ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º... üòÜ",
            "–¢–∞–∫, —Ü–µ —è, —ñ —â–æ –∑ —Ç–æ–≥–æ? üòé",
            "–ù–µ –∑–Ω–∞—é, —è–∫ –≤–∏, –∞–ª–µ —è –Ω–∞–º–∞–≥–∞—é—Å—å –≤–∏–∂–∏—Ç–∏. ü´£",
            "–ù–µ –±—ñ–¥–∞, –ø—Ä–æ—Å—Ç–æ –∂–∏—Ç—Ç—è. üòú",
            "–ù—É —â–æ, –ø–æ—ó—Ö–∞–ª–∏? ü§ô",
            "–Ø —â–µ –Ω–µ –≤–∏—Ä—ñ—à–∏–≤, —á–∏ —Ü–µ –ø–æ–≥–∞–Ω–æ, —á–∏ –¥—É–∂–µ –ø–æ–≥–∞–Ω–æ. üòè",
            "–¶–µ –ø—Ä–æ—Å—Ç–æ —à–∏–∫–∞—Ä–Ω–æ! üî•",
            "–π–¥–∏ –Ω–∞—Ñ—ñ–≥ "
    );

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            // –ë–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤ –≥—Ä—É–ø—ñ, —è–∫—â–æ –π–æ–≥–æ —Ç–µ–≥–Ω—É–ª–∏ –∞–±–æ –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 50%
            if (update.getMessage().isGroupMessage()) {
                String randomResponse1 = responses.get(random.nextInt(responses.size()));
                sendTextMessage(chatId, randomResponse1);
                if (messageText.contains("@" + getBotUsername()) || random.nextInt(100) < 60) {
                    String randomResponse = responses.get(random.nextInt(responses.size()));
                    sendTextMessage(chatId, randomResponse);
                }
            } else { // –í –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–∞—Ç–∞—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–≤–∂–¥–∏
                String randomResponse = responses.get(random.nextInt(responses.size()));
                sendTextMessage(chatId, randomResponse);
            }
        }
    }


    private void sendTextMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new FunnyBot());

        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}